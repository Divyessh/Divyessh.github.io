<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Divyessh's Blog</title><link href="https://divyessh.github.io/" rel="alternate"></link><link href="https://divyessh.github.io/feeds/all.atom.xml" rel="self"></link><id>https://divyessh.github.io/</id><updated>2021-03-21T00:00:00+05:30</updated><entry><title>Programming Languages</title><link href="https://divyessh.github.io/programming-languages.html" rel="alternate"></link><published>2021-03-21T00:00:00+05:30</published><updated>2021-03-21T00:00:00+05:30</updated><author><name>Divyessh Maheshwari</name></author><id>tag:divyessh.github.io,2021-03-21:/programming-languages.html</id><summary type="html">&lt;h1&gt;Introduction&lt;/h1&gt;
&lt;p&gt;According to wikipedia :&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Computer programming is the process of designing and building an executable computer program to accomplish a specific computing result or to perform a specific task.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;That is correct and accurate but in layman terms:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It is the process of &lt;strong&gt;instructing computer&lt;/strong&gt; to &lt;strong&gt;perform different tasks&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Now â€¦&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Introduction&lt;/h1&gt;
&lt;p&gt;According to wikipedia :&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Computer programming is the process of designing and building an executable computer program to accomplish a specific computing result or to perform a specific task.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;That is correct and accurate but in layman terms:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It is the process of &lt;strong&gt;instructing computer&lt;/strong&gt; to &lt;strong&gt;perform different tasks&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Now what that simply states is that programming must consist of two features:
- It should be instructing the computer.
- It should be doing something that means resulting in any event.&lt;/p&gt;
&lt;h1&gt;Programming Language&lt;/h1&gt;
&lt;p&gt;Now to satisfy the first feature of programming, we need a medium so that we can send our instructions to computer. By that I mean since computers can not understand english ( or any other generally spoken langauge ), we need to express our instructions such that computers can understand them. In order to do this, we have designed several &lt;strong&gt;programming languages&lt;/strong&gt;. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A programming language is the set of instructions through which humans interact with computers.
These are the syntactically formed language which can be compiled so that it could be understood by the computer.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;How does computer understands the programming language&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Machine language is the language understood by a computer. It is very difficult to understand, but it is the only thing that the computer can work with. All programs and programming languages eventually generate or run programs in machine language.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Every programming language is converted into machine language , which has all the instructions as binary numbers , by a compiler ( or an interpreter ). &lt;/p&gt;
&lt;h1&gt;Different programming languages&lt;/h1&gt;
&lt;p&gt;Languages mainly vary on the basis of syntax, rules and speed.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Commonly more the rules and strict syntax the language has, the faster it is. ( Although this is not neccerily true)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Difference&lt;/h2&gt;
&lt;p&gt;We can initially divide languages based on the way they are converted to machine Language:
- Compiled :  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="n"&gt;compiler&lt;/span&gt; &lt;span class="n"&gt;produces&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;program&lt;/span&gt; &lt;span class="n"&gt;written&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;assembly&lt;/span&gt; &lt;span class="k"&gt;language&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;assembler&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="n"&gt;architecture&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt; &lt;span class="n"&gt;turns&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;resulting&lt;/span&gt; &lt;span class="n"&gt;program&lt;/span&gt; &lt;span class="k"&gt;into&lt;/span&gt; &lt;span class="nb"&gt;binary&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Assembly&lt;/span&gt; &lt;span class="k"&gt;language&lt;/span&gt; &lt;span class="n"&gt;varies&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="k"&gt;each&lt;/span&gt; &lt;span class="n"&gt;individual&lt;/span&gt; &lt;span class="n"&gt;computer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;depending&lt;/span&gt; &lt;span class="n"&gt;upon&lt;/span&gt; &lt;span class="n"&gt;its&lt;/span&gt; &lt;span class="n"&gt;architecture&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Consequently&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;compiled&lt;/span&gt; &lt;span class="n"&gt;programs&lt;/span&gt; &lt;span class="n"&gt;can&lt;/span&gt; &lt;span class="k"&gt;only&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt; &lt;span class="k"&gt;on&lt;/span&gt; &lt;span class="n"&gt;computers&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="n"&gt;have&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;same&lt;/span&gt; &lt;span class="n"&gt;architecture&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;computer&lt;/span&gt; &lt;span class="k"&gt;on&lt;/span&gt; &lt;span class="n"&gt;which&lt;/span&gt; &lt;span class="n"&gt;they&lt;/span&gt; &lt;span class="n"&gt;were&lt;/span&gt; &lt;span class="n"&gt;compiled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="n"&gt;compiled&lt;/span&gt; &lt;span class="n"&gt;program&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="k"&gt;not&lt;/span&gt; &lt;span class="n"&gt;human&lt;/span&gt; &lt;span class="n"&gt;readable&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;but&lt;/span&gt; &lt;span class="k"&gt;instead&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="n"&gt;architecture&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;specific&lt;/span&gt; &lt;span class="n"&gt;machine&lt;/span&gt; &lt;span class="k"&gt;language&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Creating&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;compiled&lt;/span&gt; &lt;span class="n"&gt;program&lt;/span&gt; &lt;span class="n"&gt;requires&lt;/span&gt; &lt;span class="n"&gt;several&lt;/span&gt; &lt;span class="n"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="n"&gt;Despite&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="n"&gt;drawback&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;compiled&lt;/span&gt; &lt;span class="n"&gt;programs&lt;/span&gt; &lt;span class="k"&gt;are&lt;/span&gt; &lt;span class="n"&gt;faster&lt;/span&gt; &lt;span class="k"&gt;than&lt;/span&gt; &lt;span class="n"&gt;those&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="n"&gt;must&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt; &lt;span class="n"&gt;through&lt;/span&gt; &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="n"&gt;interpreter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Also&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;often&lt;/span&gt; &lt;span class="n"&gt;possible&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="n"&gt;recompile&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;program&lt;/span&gt; &lt;span class="n"&gt;so&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="n"&gt;will&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt; &lt;span class="k"&gt;on&lt;/span&gt; &lt;span class="n"&gt;different&lt;/span&gt; &lt;span class="n"&gt;platforms&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Examples&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="n"&gt;languages&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="k"&gt;are&lt;/span&gt; &lt;span class="n"&gt;normally&lt;/span&gt; &lt;span class="n"&gt;used&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="n"&gt;produce&lt;/span&gt; &lt;span class="n"&gt;compiled&lt;/span&gt; &lt;span class="n"&gt;programs&lt;/span&gt; &lt;span class="n"&gt;include&lt;/span&gt; &lt;span class="k"&gt;C&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;Fortran&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="k"&gt;COBOL&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Interpreted : 
    In an interpreted program, on the other hand, the source code typically is the program. Programs of this type (often known as scripts) require an interpreter, which parses the commands in the program and then executes them. Some interpreters, such as the Unix shells (sh, csh, ksh, etc.), read and then immediately execute each command, while others, such as Perl, analyze the entire script before sending the corresponding machine language instructions. The advantage of a script is that it is very portable.&lt;/p&gt;
&lt;p&gt;Any computer that has the appropriate interpreter installed may run the program more or less unchanged. This is a disadvantage as well, because the program will not run at all if the interpreter is not available. In general, interpreted programs are slower than compiled programs, but are easier to debug and revise. Other examples of interpreted languages include JavaScript and Python.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Major Languages&lt;/h1&gt;
&lt;h2&gt;Python&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Python is powerful... and fast; plays well with others; runs everywhere; is friendly &amp;amp; easy to learn; is Open &lt;br&gt;
~Python.org&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Python can be easy to pick up whether you're a first time programmer or you're experienced with other languages. &lt;/p&gt;
&lt;p&gt;Python is a general-purpose language that is often used outside of websites. Python aims to be very readable, so even a beginner could figure out what some simple Python code accomplishes. Python has the unusual feature of using indentation to mark different parts of code. &lt;/p&gt;
&lt;p&gt;It is mainly used for making Bots and Perofrming Artificial Intelligense and Data Science.&lt;/p&gt;
&lt;p&gt;Its keypoints are:
- Interpreter Based
- Minimal Set of rules
- Comparitively slower then other compiler based laguages but fast in interpreter based languages
- Object Oriented&lt;/p&gt;
&lt;p&gt;It was my first language and was very easy to learn for me. You can look more about it in my other posts.&lt;/p&gt;
&lt;h2&gt;Java&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Java is at the heart of our digital lifestyle. It's the platform for launching careers, exploring human-to-digital interfaces, architecting the world's best applications, and unlocking innovation everywhereâ€”from garages to global organizations.
~Go.java&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Java code does not get directly converted into machine code. Instead it runs on a "virtual machine" which can run on all sorts of different hardware. This lets Java fulfill their slogan of "Write once, run anywhere". Java was once intended for widespread use on web browsers, but that is less common and a very different language is used for that (JavaScript). It is used in regular desktop applications, but its most popular consumer use is for creating Android apps.&lt;/p&gt;
&lt;p&gt;Its Keypoints are:
- Compiler Based ( Virtual Machine )
- User Friendly
- Object Oriented
- Fast as compared to other interpreted based languages, but relatively slow in compiled languages.&lt;/p&gt;
&lt;h2&gt;C&lt;/h2&gt;
&lt;p&gt;The C language is the 'grandfather' of modern languages, and it (and C++) influenced many languages, especially Java and C#. Many lower-level systems (and language compilers themselves) are written in C.&lt;/p&gt;
&lt;p&gt;It is considered as one of the Fastest languages and is used for making compilers, games, applications, operating system and almost everywhere where speed is one of the primary factor.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: I have only mentioned 3 Languages and I am sorry if I didn't mention your major one. I hope that you will join my facebook group to get in touch. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Social Media&lt;/h3&gt;
&lt;p&gt;The following is its link : 
- &lt;a href="https://www.facebook.com/Divyesshs-Blog-104379424717849"&gt;FaceBook Page&lt;/a&gt;
- &lt;a href="https://www.facebook.com/groups/feed/"&gt;FaceBook Group&lt;/a&gt;&lt;/p&gt;</content><category term="Tutorials"></category></entry><entry><title>API - An application programming interface</title><link href="https://divyessh.github.io/api-an-application-programming-interface.html" rel="alternate"></link><published>2020-10-29T00:00:00+05:30</published><updated>2020-10-29T00:00:00+05:30</updated><author><name>Divyessh Maheshwari</name></author><id>tag:divyessh.github.io,2020-10-29:/api-an-application-programming-interface.html</id><summary type="html">&lt;h1&gt;Introduction&lt;/h1&gt;
&lt;p&gt;'An application programming interface (API) is a computing interface which defines interactions between multiple software intermediaries.'&lt;/p&gt;
&lt;p&gt;Today we are going to discuss about different API frameworks in Python.&lt;/p&gt;
&lt;p&gt;Both Django and Flask are great frameworks.
Django comes in handy when a service depends on a database, needs a simple â€¦&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Introduction&lt;/h1&gt;
&lt;p&gt;'An application programming interface (API) is a computing interface which defines interactions between multiple software intermediaries.'&lt;/p&gt;
&lt;p&gt;Today we are going to discuss about different API frameworks in Python.&lt;/p&gt;
&lt;p&gt;Both Django and Flask are great frameworks.
Django comes in handy when a service depends on a database, needs a simple admin interface and perhaps a requires a nice web GUI. All that comes out of the box with Django thanks to its admin app and template engine.
When a simple micro-service that exposes a couple API Endpoints is needed, this is where Flask shines. Moreover, Flask can be easily extended, as there are a lot of external packages if we need templates.
However when it comes to RESTful microservices, both Flask and Django did not live up to expectations when it came to performance and development speed. This is when we found Fast API.&lt;/p&gt;
&lt;h1&gt;Usage and Speed&lt;/h1&gt;
&lt;p&gt;Here we are only concerned about a RESTful Micro-service, which would have the following as basic requirements. &lt;br&gt;
Exposes REST endpoint/s. &lt;br&gt;
OpenAPI(Swagger) documentation. &lt;br&gt;
Database connection (Optional).&lt;/p&gt;
&lt;h2&gt;Django&lt;/h2&gt;
&lt;p&gt;Django package does include REST APIâ€™s for that Django-rest-framework is your best option. It comes with a ton of features, but Open API generation is not among those features :). It comes with its own documentation for REST APIs though. For Open API documentation, drf-yasg or django-rest-swagger packages can be used. Trying to extend the documentation is quite painful with any of these and sometimes we even had to just use .yaml files instead.&lt;/p&gt;
&lt;h2&gt;Flask&lt;/h2&gt;
&lt;p&gt;No external packages are required to create REST endpoints with Flask however, for Open API documentation external packages like Flask-restplus can be utilised, However it usually generates outdated version of Open API documentation. But still it is a nice option.&lt;/p&gt;
&lt;h2&gt;FastAPI&lt;/h2&gt;
&lt;p&gt;Creating a REST API endpoint with Fast API and Open API takes less than a 5 minutes. It does not require any template. Changing the customizing documentation and adding validations is quite easy and it is explained in the documentation.&lt;/p&gt;
&lt;p&gt;For documentation click &lt;a href="https://pydantic-docs.helpmanual.io/usage/schema/"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Also it uses &lt;code&gt;uvicorn&lt;/code&gt; or optionally &lt;code&gt;hyoercorn&lt;/code&gt; as its ASGI servers, which makes it really user friendly. And when it comes to speed no other api framework can beat it.&lt;/p&gt;
&lt;p&gt;Thank You and please visit the facebook link for connecting and interacting.&lt;/p&gt;</content><category term="Python"></category></entry><entry><title>My experience of PyCon India</title><link href="https://divyessh.github.io/my-experience-of-pycon-india.html" rel="alternate"></link><published>2020-10-13T00:00:00+05:30</published><updated>2020-10-13T00:00:00+05:30</updated><author><name>Divyessh Maheshwari</name></author><id>tag:divyessh.github.io,2020-10-13:/my-experience-of-pycon-india.html</id><summary type="html">&lt;h1&gt;Introduction&lt;/h1&gt;
&lt;p&gt;This was my first PyCon India and in the following post I am going to share my experience and learning from the conference. Conference days took place on 2nd and 3rd October 2020.
Although the conference was online it was conducted really well and I enjoyed a lot attending â€¦&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Introduction&lt;/h1&gt;
&lt;p&gt;This was my first PyCon India and in the following post I am going to share my experience and learning from the conference. Conference days took place on 2nd and 3rd October 2020.
Although the conference was online it was conducted really well and I enjoyed a lot attending it. There were folks from many different areas of the world who shared their knowledge and learnings in the talks, keynotes and many more events.&lt;/p&gt;
&lt;p&gt;From live coding sessions in keynotes to talks about community, diversity, and bringing about positive change in the community. The esteemed keynote speakers have covered the spectrum of presenting some truly inspirational content at PyCon India.&lt;/p&gt;
&lt;h1&gt;Keynotes&lt;/h1&gt;
&lt;p&gt;All keynotes took place in stage Bengaluru. Each and every keynote was really nice and very educational but I would like to share one of the Keynotes in detail that were given by &lt;a href="https://www.linkedin.com/in/sanand0/"&gt;Mr. S. Anand&lt;/a&gt;. &lt;/p&gt;
&lt;h2&gt;Keynote - Making Apps Seems Faster Without Optimizing&lt;/h2&gt;
&lt;p&gt;Let us begin with the keynote of &lt;a href="https://www.linkedin.com/in/sanand0/"&gt;Mr. S. Anand&lt;/a&gt;. CEO of Gramener, which was probably the best begining for the Conference. 
With "&lt;em&gt;Making Apps Seems Faster Without Optimizing&lt;/em&gt;" as the topic, the talk was full of great knowledge. The concepts were based on the usability principle of Robustness.
So the concepts were summarised as :&lt;/p&gt;
&lt;h3&gt;Prioritize :&lt;/h3&gt;
&lt;p&gt;Show most important things first. &lt;strong&gt;Progressive enhancement&lt;/strong&gt;. Calculate the most impactful change first.&lt;/p&gt;
&lt;h3&gt;Update Users :&lt;/h3&gt;
&lt;p&gt;Dont let the user see a blank black screen. Print the progress. At least users know the app is doing something. 
&lt;strong&gt;Logging()&lt;/strong&gt; is more flexible. You can control levels, show time, and save logs. 
But &lt;strong&gt;tqdm()&lt;/strong&gt; shows % completion whihc has a great appearence.
&lt;strong&gt;Websockets&lt;/strong&gt; are a great way to share progress in web apps.
Set beatable expectations.&lt;/p&gt;
&lt;h3&gt;Recover from errors :&lt;/h3&gt;
&lt;p&gt;Continue from where they left off. Cache the calculations (&lt;strong&gt;SqliteDict&lt;/strong&gt;) , and reload past calculations on re-start. Invalidate the cache if inputs have changed&lt;/p&gt;
&lt;h3&gt;Pre Compute :&lt;/h3&gt;
&lt;p&gt;Calculate common things upfront. Pre-compute things that donâ€™t change much.&lt;/p&gt;
&lt;p&gt;For the slides of the talk : &lt;a href="https://github.com/sanand0/pyconindia2020/blob/master/pycon-india-2020-keynote.pptx"&gt;click here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I shared this one in such details because this was something that I actually could understand really well and am seriously looking forward to imply in my code.&lt;/p&gt;
&lt;h1&gt;Talks&lt;/h1&gt;
&lt;p&gt;This time the talks took place at different stages simultaneously ( Bengaluru, Pune, Chennai, Delhi and Hydrabad ) and every one of the talks I attended was very entertaining and educational. We had to choose that which stage we would like to get in and attend the talk of our choice. But I would have really liked it if I could attend all sessions live. But I also agree that conducting so many talks in two days and also providing recordings is in itself a great management.&lt;/p&gt;
&lt;p&gt;So now let us discuss some of my favourite talks:&lt;/p&gt;
&lt;h2&gt;Publishing well-formed Python packages by Julin S&lt;/h2&gt;
&lt;p&gt;I enjoyed this talk a lot since I was learning how to package a my application and it was actually a great help for me at the time. I specially found the presentations to be designed really well. Also the communication skills were very good.&lt;/p&gt;
&lt;h2&gt;Revolutionize the Web with Python - Brython by Antriksh Verma&lt;/h2&gt;
&lt;p&gt;This one particularly caught my attention not only because of the great content and a solution for my future web app development but also because of seeing a kid with same age of mine giving the presentation and talk which is probably because I feel that as I am getting into a higher grade I keep on giving less stage talks and so I have started developing a small fear of speaking with or without a good preparation and that confidence. So yeah I enjoyed it too.&lt;/p&gt;
&lt;h2&gt;Lightning talks&lt;/h2&gt;
&lt;p&gt;I really appriciate the way people came in front and gave the presentation about how they implemented python in their life. It was very good to hear about those experience and I am pretty sure that it has given me a great inspiration for finding solutions for my small problems by python (programming).&lt;/p&gt;</content><category term="Python"></category></entry><entry><title>Starting with the Journey of Python</title><link href="https://divyessh.github.io/starting-with-the-journey-of-python.html" rel="alternate"></link><published>2020-08-10T00:00:00+05:30</published><updated>2020-08-10T00:00:00+05:30</updated><author><name>Divyessh Maheshwari</name></author><id>tag:divyessh.github.io,2020-08-10:/starting-with-the-journey-of-python.html</id><summary type="html">&lt;h1&gt;Hello World&lt;/h1&gt;
&lt;p&gt;With the interest in Mathematics and curosity to learn programming, about four months ago I started to learn Python. Python was the choice as it was the latest language that I knew and also the most trending. The absolute start was from &lt;a href="https://youtube.com"&gt;YouTube&lt;/a&gt;, a 3 hour tutorial and â€¦&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Hello World&lt;/h1&gt;
&lt;p&gt;With the interest in Mathematics and curosity to learn programming, about four months ago I started to learn Python. Python was the choice as it was the latest language that I knew and also the most trending. The absolute start was from &lt;a href="https://youtube.com"&gt;YouTube&lt;/a&gt;, a 3 hour tutorial and then many small and different lectures. After I learnt the basics, my interest to explore it and curosity both hiked up. Once I got a game tutorial in my YouTube recommendations. This made me create my first python game using the turtle library. Then I made a game with the turtle library and my imagination. I placed that game on a online source code market. In a month it was sold for around 10 USD and that was the moment which gave me the boost for exploring other feilds in python.&lt;/p&gt;
&lt;h1&gt;Data and Science&lt;/h1&gt;
&lt;p&gt;After making some good games, I wanted to explore more so my maternal Uncle &lt;a href="https://in.linkedin.com/in/i-am-amit-maheshwari-pmp"&gt;Mr Amit&lt;/a&gt; suggested me and I went on &lt;a href="https://udemy.com"&gt;Udemy&lt;/a&gt; and purchased a Data Science course with Mr Jose Portila as the instructor. It was the one that created my foundation. I learned the basics of most of the libraries in it like scikit-learn and tensorflow. My Uncle also asked me to make an account on the very famous platform known as &lt;a href="https://stackoverflow.com"&gt;StackOverflow&lt;/a&gt; where people can ask teir doubts and answer to the questions asked by others. This was also a big step for me as initially I was unable to answer a single question but as I practiced more I gradually started to answer question and started to build reputation(the points awarded by SO for answering questions). My another Uncle introduced me to &lt;a href="https://in.linkedin.com/in/satyaakam"&gt;Mr Satyakam Goswami&lt;/a&gt;. He is currently guiding and mentoring me through my journey.&lt;/p&gt;
&lt;h1&gt;What next!&lt;/h1&gt;
&lt;p&gt;On this Blog, I will share with you the problems I faced ( with solutions ), the learnings I have got so far and the next stations of this journey. So I hope that you will like to read them all and enjoy with me. See you soon!&lt;/p&gt;</content><category term="Python"></category></entry><entry><title>How the Web works</title><link href="https://divyessh.github.io/how-the-web-works.html" rel="alternate"></link><published>2020-08-01T00:00:00+05:30</published><updated>2020-08-01T00:00:00+05:30</updated><author><name>Divyessh Maheshwari</name></author><id>tag:divyessh.github.io,2020-08-01:/how-the-web-works.html</id><summary type="html">&lt;h1&gt;Some basic terms&lt;/h1&gt;
&lt;h2&gt;Clients&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Clients&lt;/strong&gt; are the basic web user's internet-connected devices (for example, your computer connected to your Wi-Fi, or your phone connected to your mobile network) and web-accessing software available on those devices (usually a web browser like Firefox or Chrome).&lt;/p&gt;
&lt;h2&gt;Servers&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Servers&lt;/strong&gt; are computers that store websites â€¦&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Some basic terms&lt;/h1&gt;
&lt;h2&gt;Clients&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Clients&lt;/strong&gt; are the basic web user's internet-connected devices (for example, your computer connected to your Wi-Fi, or your phone connected to your mobile network) and web-accessing software available on those devices (usually a web browser like Firefox or Chrome).&lt;/p&gt;
&lt;h2&gt;Servers&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Servers&lt;/strong&gt; are computers that store websites or apps. When a client device wants to access a webpage, a copy of the webpage is downloaded from the server onto the client machine to be displayed in the user's web browser.&lt;/p&gt;
&lt;h2&gt;A Road Trip&lt;/h2&gt;
&lt;p&gt;The client and server we have described above do not tell the whole story. There are many other parts involved, and we will describe them below.
For now, let's imagine that the web is a road. On one end of the road is the client, which is like your house. On the other end of the road is the server, which is a shop you want to buy something from.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Your internet connection&lt;/strong&gt;: Allows you to send and receive data on the web. It's basically like the street between your house and the shop.
 &lt;strong&gt;TCP/IP&lt;/strong&gt;: Transmission Control Protocol and Internet Protocol are communication protocols that define how data should travel across the internet. This is like the transport mechanisms that let you place an order, go to the shop, and buy your goods. In our example, this is like a car or a bike (or however else you might get around).
&lt;strong&gt;DNS&lt;/strong&gt;: Domain Name Servers are like an address book for websites. When you type a web address in your browser, the browser looks at the DNS to find the website's real address before it can retrieve the website. The browser needs to find out which server the website lives on, so it can send HTTP messages to the right place (see below). This is like looking up the address of the shop so you can access it.
&lt;strong&gt;HTTP&lt;/strong&gt;: Hypertext Transfer Protocol is an application protocol that defines a language for clients and servers to speak to each other. This is like the language you use to order your goods.
&lt;strong&gt;Component files&lt;/strong&gt;: A website is made up of many different files, which are like the different parts of the goods you buy from the shop. These files come in two main types:
- &lt;strong&gt;Code files&lt;/strong&gt;: Websites are built primarily from HTML, CSS, and JavaScript, though you'll meet other technologies a bit later.
- &lt;strong&gt;Assets&lt;/strong&gt;: This is a collective name for all the other stuff that makes up a website, such as images, music, video, Word documents, and PDFs.&lt;/p&gt;
&lt;h2&gt;More Practical Expirience&lt;/h2&gt;
&lt;p&gt;The browser goes to the DNS server, and finds the real address of the server that the website lives on (you find the address of the shop). The browser sends an HTTP request message to the server, asking it to send a copy of the website to the client (you go to the shop and order your goods). This message, and all other data sent between the client and the server, is sent across your internet connection using TCP/IP. If the server approves the client's request, the server sends the client a "200 OK" message, which means "Of course you can look at that website! Here it is", and then starts sending the website's files to the browser as a series of small chunks called data packets (the shop gives you your goods, and you bring them back to your house). The browser assembles the small chunks into a complete web page and displays it to you.&lt;/p&gt;
&lt;h2&gt;Reference&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/How_the_Web_works"&gt;How_the_Web_works&lt;/a&gt;
&lt;em&gt;Most of the content was learnt by me from this website, I have selected the main and important content and presented it to you and I hope that you have buckle up, because this is just the start&lt;/em&gt;&lt;/p&gt;</content><category term="Internet"></category></entry></feed>